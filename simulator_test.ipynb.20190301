{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "import numpy as np\n",
    "from numba import jit\n",
    "from potentials import *\n",
    "from distances import *\n",
    "from sampling import *\n",
    "from vv import vvJ\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import animation\n",
    "from IPython.display import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pot_gradient(coord, pbc=False,boxsize=(0,10), sig=1, eps=1):\n",
    "    vecs = vectors(coord, boxsize, pbc)\n",
    "    #print(vecs.shape())\n",
    "    return gradients.LJ(vecs, sig, eps) + gradients.harmonic(coord,boxsize, pbc, r0 =(5, 5), k=5)\n",
    "def pot(coord, pbc=False,boxsize=(0,10), sig=1, eps=1):\n",
    "    vecs = vectors(coord, boxsize, pbc)\n",
    "    dist = distances(vecs)\n",
    "    return potentials.LJ(dist, eps, sig) + potentials.harmonic(coord, boxsize, pbc, r0 =(5, 5),k=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_init = mcmc(pot, 50, 2, 10000, stepsize=0.01, beta=100, boxsize=(0,10), pbc=False)\n",
    "v_init = np.zeros_like(r_init)\n",
    "v_init[0] = [10,0]\n",
    "r_matrix, v_matrix, a_matrix=vvJ(pot_gradient, r_init, v_init, 1, 10, 0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50, 50, 2)\n"
     ]
    }
   ],
   "source": [
    "vecs = vectors(r_init, (0,1))\n",
    "print(vecs.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "colors = np.arange(len(r_init))\n",
    "scat = ax.scatter(r_init[:,0], r_init[:,1], c=colors)\n",
    "circles = [plt.Circle(r, radius=0.5, fill=False) for i,r in enumerate(r_init)]\n",
    "for c in circles:\n",
    "    plt.gca().add_patch(c)\n",
    "qax = ax.quiver(r_matrix[0,:,0], r_matrix[0,:,1], v_matrix[1,:,0], v_matrix[1,:,1],np.arange(len(r_init)),scale=50, width=0.005)\n",
    "ax.set_xlim(0, 10)\n",
    "ax.set_ylim(0, 10)\n",
    "def animate(i):\n",
    "    index = 4*i\n",
    "    data = r_matrix[index]\n",
    "    scat.set_offsets(data)\n",
    "    for i, c in enumerate(circles):\n",
    "        c.center = data[i]\n",
    "    qax.set_UVC(v_matrix[index,:,0],v_matrix[index,:,1])\n",
    "    qax.set_offsets(data)\n",
    "    return scat,\n",
    "\n",
    "#Writer = animation.writers['ffmpeg']\n",
    "#writer = Writer(fps=25, bitrate=1800)\n",
    "anim = animation.FuncAnimation(fig, animate, interval=20, frames=750, repeat=False)\n",
    "#anim.save('LJ_Harmonic_Particles.mp4', writer=writer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
